---
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
import { contentfulClient } from "../../lib/contentful";
import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const posts = entries.items.map(item => {
    const {
      blogTitle,
      author,
      publishedDate,
      description,
      blogContents,
      slug,
      ogImage,
      tags,
    } = item.fields;
    return {
      title: blogTitle,
      author,
      postSlug: slug,
      description,
      ogImage,
      content: blogContents,
      pubDatetime: new Date(publishedDate),
      tags,
    };
  });
  // const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: { slug: post.postSlug },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
let post;

const entries = await contentfulClient.getEntries<BlogPost>({
  content_type: "blogPost",
  "fields.slug": slug,
});

const posts = entries.items.map(item => {
  const {
    blogTitle,
    author,
    publishedDate,
    description,
    blogContents,
    slug,
    ogImage,
    tags,
  } = item.fields;
  return {
    title: blogTitle,
    author,
    postSlug: slug,
    description,
    ogImage,
    content: blogContents,
    pubDatetime: new Date(publishedDate),
    tags,
  };
});

post = posts[0];

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
